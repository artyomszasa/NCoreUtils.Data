namespace NCoreUtils.Data;

using System;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

internal static class HelpersEmitter
{
    private static MemberAccessExpressionSyntax SimpleMemberAccessExpression(ExpressionSyntax expression, SimpleNameSyntax member)
        => MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, expression, member);

    private static MemberAccessExpressionSyntax SimpleMemberAccessExpression(ExpressionSyntax expression, string member)
        => MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, expression, IdentifierName(member));

    private static InvocationExpressionSyntax SimpleInvocationExpression(ExpressionSyntax instance, string methodName, params ArgumentSyntax[] arguments)
        => InvocationExpression(SimpleMemberAccessExpression(instance, IdentifierName(methodName)), ArgumentList(SeparatedList(arguments)));

    private static ClassDeclarationSyntax EmitClass()
    {
        var hashCodeType = ParseTypeName("System.HashCode");

        var aggregateHash = MethodDeclaration(ParseTypeName("int"), "AggregateHash")
            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword)))
            .WithTypeParameterList(TypeParameterList(SeparatedList(new TypeParameterSyntax[]
            {
                TypeParameter(Identifier("T"))
            })))
            .WithParameterList(ParameterList(SeparatedList(new ParameterSyntax[]
            {
                Parameter(Identifier("source")).WithType(ParseTypeName("System.Collections.Generic.IReadOnlyList<T>")).WithModifiers(TokenList(Token(SyntaxKind.ThisKeyword)))
            })))
            .WithBody(Block(
                LocalDeclarationStatement(
                    VariableDeclaration(hashCodeType, SeparatedList(new []
                    {
                        VariableDeclarator(Identifier("builder"), default, EqualsValueClause(
                            ObjectCreationExpression(
                                hashCodeType,
                                ArgumentList(SeparatedList(Array.Empty<ArgumentSyntax>())),
                                default
                            )
                        ))
                    }))
                ),
                ExpressionStatement(SimpleInvocationExpression(
                    IdentifierName("builder"),
                    "Add",
                    Argument(SimpleMemberAccessExpression(IdentifierName("source"), "Count"))
                )),
                ForEachStatement(
                    ParseTypeName("T"),
                    "item",
                    IdentifierName("source"),
                    Block(ExpressionStatement(SimpleInvocationExpression(IdentifierName("builder"), "Add", Argument(IdentifierName("item")))))
                ),
                ReturnStatement(SimpleInvocationExpression(IdentifierName("builder"), "ToHashCode"))
            ));

        return ClassDeclaration("ValueComparisonHelpers")
            .WithModifiers(TokenList(Token(SyntaxKind.InternalKeyword), Token(SyntaxKind.StaticKeyword)))
            .WithMembers(List(new MemberDeclarationSyntax[] { aggregateHash }));
    }

    public static CompilationUnitSyntax EmitCompilationUnit()
    {
        SyntaxTriviaList syntaxTriviaList = TriviaList(
            Comment("// <auto-generated/>"),
            Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))
        );

        return CompilationUnit()
            .AddMembers(
                NamespaceDeclaration(IdentifierName("NCoreUtils.Data.EntityFrameworkCore.Extensions"))
                    .WithLeadingTrivia(syntaxTriviaList)
                    .AddMembers(
                        EmitClass()
                    )
            )
            .NormalizeWhitespace();
    }
}